//#include config.oajs
//#include helpers.oajs

function AttackTarget(targetSerial) {
    var targetSerial = targetSerial === undefined ? Orion.TargetSystemSerial() : targetSerial;

    if (!Player.WarMode())
        Orion.WarMode(true);

    if (Orion.FindObject(targetSerial)) {
        Orion.ShowStatusbar(targetSerial, _attack["statusBar"]["x"], _attack["statusBar"]["y"], false);
        Orion.CharPrint(targetSerial, 20, "<< Target >>");
        Orion.Attack(targetSerial);
        if (_attack["follow"]) {
            Orion.Follow(targetSerial);
        }
    }
}

function Attack() {
    AttackTarget(Orion.TargetSystemSerial());
}

function AutoHealSelf() {
    print("Healing at " + getPercentValue(Player.MaxHits(), _healing["threshold"]) + "HP")
    while (true) {
        while (!Player.Dead() && (Player.Hits() < (getPercentValue(Player.MaxHits(), _healing["threshold"])) || Player.Poisoned())) {
            Orion.Say("[bandself");
            Orion.Wait(200);

            if (Orion.BuffExists(_buffs["healing"]) && Orion.BuffTimeRemaining(_buffs["healing"])) {

                Orion.AddDisplayTimer("healing",
                    Orion.BuffTimeRemaining(_buffs["healing"]),
                    "custom",
                    "LineBar",
                    "Healing...",
                    _healing["statusBar"]["x"],
                    _healing["statusBar"]["y"]
                );
                Orion.DisplayTimerSetIcon("healing", "Left", "0x0E21");
                Orion.DisplayTimerSetSize("healing", 100, 30);

                while (Orion.BuffExists(_buffs["healing"])) {
                    Orion.Wait(100);
                }
            }


            if (Orion.Count('0x0E21') < 80) {
                charPrint('[' + Orion.Count('0x0E21') + '] bandages left ! ');
            }
        }
        Orion.Wait(500);
    }
}

function CastBushido() {
    print("Started, casting spells:");
    var spells = [];

    for (var i = 0; i < arguments.length; i++) {
        spells.push(arguments[i]);
        print(">> " + arguments[i]);
    }

    while (true) {
        spells.forEach(function (spell) {
            if (!Player.Dead() && Player.Mana() > 5 && !Orion.SpellStatus(spell)) {
                Orion.Cast(spell);
                Orion.Wait(500);
            }
        });

        Orion.Wait(100);
    }
}

function CastChivalry() {
    spells = {
        "Consecrate Weapon": 0x75f6,
    }

    print("Started, casting spells:");
    Object.keys(spells).forEach(function (key) {
        print(">>> " + key + ", buff -> "+ spells[key]);
    });

    while (true) {
        Object.keys(spells).forEach(function (key) {
            if (!Player.Dead() && Player.Mana() > 10 && !Orion.BuffExists(spells[key])) {
                Orion.Cast(key);
                Orion.Wait(1000);
            }
        });
        Orion.Wait(100);
    }
}



function getWeaponInfo(serial) {
    var exp = 0;
    var lvl = 0;
    var object = Orion.FindObject(serial);
    if (object != null) {
        var properties = object.Properties();
        var matchesExp = /Experience: (\d+)/.exec(properties);
        var matcheslvl = /Level: (\d+)/.exec(properties);

        if (matchesExp && matchesExp.length > 0)
            var exp = parseInt(matchesExp[1]);

        if (matcheslvl && matcheslvl.length > 0)
            var lvl = parseInt(matcheslvl[1]);

        return { "lvl": lvl, "exp": exp };
    }
}

function WeaponLevelingStats() {
    var weapon = "0x402AE1A5";

    var started = new Date().getTime();
    var totalExp = 0;
    while (true) {

        var startExp = getWeaponInfo(weapon)['exp'];
        if (Orion.WaitJournal("Your weapon", Orion.Now(), Orion.Now() + 20000)) {
            Orion.Wait(500);
            var currentExp = getWeaponInfo(weapon)['exp'];
            var currentLvl = getWeaponInfo(weapon)['lvl'];

            var toNextLvl = 100 * Math.pow(currentLvl + 1, 2) - 100;
            var totalExp = totalExp + (currentExp - startExp);
            var minutes = ((new Date().getTime() - started) / 1000) / 60;
            var expPerMinute = (totalExp / minutes).toFixed(2);
            Orion.Print('0x0035', "Weapon exp : " + currentExp + "/" + toNextLvl + " (+" + (currentExp - startExp) + ") | "+ totalExp);
            Orion.Print('0x0035', "Exp@minute : " + expPerMinute);
        }
    }
}

